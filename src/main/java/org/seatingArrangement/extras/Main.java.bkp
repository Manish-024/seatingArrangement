package org.seatingArrangement;

import java.io.*;
import java.util.*;

class Student {
    private String rollNumber;
    private String name;
    private int floorNumber;
    private int roomNumber;
    private int seatNumber;
    private String batch;
    private String course;
    private int semester;
    private String subject;

    public Student(String rollNumber, String name) {
        this.rollNumber = rollNumber;
        this.name = name;
    }

    public String getRollNumber() {
        return rollNumber;
    }

    public String getName() {
        return name;
    }

    public int getFloorNumber() {
        return floorNumber;
    }

    public int getRoomNumber() {
        return roomNumber;
    }

    public int getSeatNumber() {
        return seatNumber;
    }

    public String getBatch() {
        return batch;
    }

    public void setBatch(String batch) {
        this.batch = batch;
    }

    public String getCourse() {
        return course;
    }

    public void setCourse(String course) {
        this.course = course;
    }

    public int getSemester() {
        return semester;
    }

    public void setSemester(int semester) {
        this.semester = semester;
    }

    public String getSubject() {
        return subject;
    }

    public void setSubject(String subject) {
        this.subject = subject;
    }

    public void assignSeat(int floorNumber, int roomNumber, int seatNumber) {
        this.floorNumber = floorNumber;
        this.roomNumber = roomNumber;
        this.seatNumber = seatNumber;
    }
}

class SeatingArrangementSystem {

    private List<Student> students;
    private static final int MAX_SEATS_PER_ROOM = 20;
    private String databaseFile;

    public SeatingArrangementSystem(String databaseFile) {
        this.databaseFile = databaseFile;
        students = new ArrayList<>();
        loadStudents();
    }

    public void addStudent(Student student) {
        String rollNumber = student.getRollNumber();

        for (Student existingStudent : students) {
            if (existingStudent.getRollNumber().equals(rollNumber)) {
                System.out.println("A student with the same roll number already exists.");
                return;
            }
        }

        students.add(student);
    }


    public void displayAllStudents() {
        // Sort students based on roll numbers
        students.sort(Comparator.comparing(Student::getRollNumber));

        System.out.println("All Students:");
        for (Student student : students) {
            String seatInfo = student.getRoomNumber() != 0 ? "Floor: " + student.getFloorNumber() + ", Room: " + student.getRoomNumber() + ", Seat: " + student.getSeatNumber() : "Seat not assigned";
            System.out.println("Roll Number: " + student.getRollNumber());
            System.out.println("Name: " + student.getName());
            System.out.println("Batch: " + student.getBatch());
            System.out.println("Course: " + student.getCourse());
            System.out.println("Semester: " + student.getSemester());
            System.out.println("Subject: " + student.getSubject());
            System.out.println(seatInfo);
            System.out.println("-------------------------");
        }
    }


    public void assignSeat(String rollNumber, int floorNumber, int roomNumber, int seatNumber) {
        if (!isRoomValid(roomNumber)) {
            System.out.println("Invalid room number.");
            return;
        }

        if (seatNumber <= 0 || seatNumber > MAX_SEATS_PER_ROOM) {
            System.out.println("Invalid seat number. Seat number should be between 1 and " + MAX_SEATS_PER_ROOM + ".");
            return;
        }

        for (Student student : students) {
            if (student.getRollNumber().equals(rollNumber)) {
                if (isSeatAvailable(floorNumber, roomNumber, seatNumber)) {
                    // Check if the seat is already assigned to another student
                    for (Student existingStudent : students) {
                        if (existingStudent != student && existingStudent.getFloorNumber() == floorNumber &&
                                existingStudent.getRoomNumber() == roomNumber && existingStudent.getSeatNumber() == seatNumber) {
                            System.out.println("Seat is already assigned to another student.");
                            return;
                        }
                    }

                    student.assignSeat(floorNumber, roomNumber, seatNumber);
                    System.out.println("Seat assigned successfully.");
                } else {
                    System.out.println("Seat is already occupied or not available in the specified room.");
                }
                return;
            }
        }
        System.out.println("Student not found.");
    }


    private boolean isRoomValid(int roomNumber) {
        return roomNumber >= 1 && roomNumber <= 10;
    }

    private boolean isSeatAvailable(int floorNumber, int roomNumber, int seatNumber) {
        for (Student student : students) {
            if (student.getFloorNumber() == floorNumber && student.getRoomNumber() == roomNumber && student.getSeatNumber() == seatNumber) {
                return false; // Seat is already occupied
            }
        }
        return true; // Seat is available
    }

    public void removeStudent(String rollNumber) {
        for (Student student : students) {
            if (student.getRollNumber().equals(rollNumber)) {
                students.remove(student);
                System.out.println("Student removed successfully.");
                return;
            }
        }
        System.out.println("Student not found.");
    }

    public void displayStudentDetails(String rollNumber) {
        for (Student student : students) {
            if (student.getRollNumber().equals(rollNumber)) {
                String seatInfo = student.getRoomNumber() != 0 ? "Floor: " + student.getFloorNumber() + ", Room: " + student.getRoomNumber() + ", Seat: " + student.getSeatNumber() : "Seat not assigned";
                System.out.println("Student Details:");
                System.out.println("Roll Number: " + student.getRollNumber());
                System.out.println("Name: " + student.getName());
                System.out.println(seatInfo);
                System.out.println("-------------------------");
                return;
            }
        }
        System.out.println("Student not found.");
    }

    public void saveStudents() {
        try (FileWriter writer = new FileWriter(databaseFile)) {
            for (Student student : students) {
                writer.write(student.getRollNumber() + "," + student.getName() + "," + student.getFloorNumber() + "," + student.getRoomNumber() + "," + student.getSeatNumber() + "\n");
            }
            System.out.println("Student data saved successfully.");
        } catch (IOException e) {
            System.out.println("Error occurred while saving student data.");
        }
    }

    public void loadStudents() {
        File file = new File(databaseFile);
        if (!file.exists()) {
            try {
                file.createNewFile();
            } catch (IOException e) {
                System.out.println("Error occurred while creating the database file.");
                return;
            }
        } else {
            try (Scanner scanner = new Scanner(file)) {
                while (scanner.hasNextLine()) {
                    String line = scanner.nextLine();
                    String[] parts = line.split(",");
                    if (parts.length == 5) {
                        String rollNumber = parts[0].trim();
                        String name = parts[1].trim();
                        int floorNumber = Integer.parseInt(parts[2].trim());
                        int roomNumber = Integer.parseInt(parts[3].trim());
                        int seatNumber = Integer.parseInt(parts[4].trim());

                        Student student = new Student(rollNumber, name);
                        student.assignSeat(floorNumber, roomNumber, seatNumber);
                        students.add(student);
                    }
                }
                System.out.println("Student data loaded successfully.");
            } catch (IOException e) {
                System.out.println("Error occurred while loading student data.");
            }
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String databaseFile = "students.csv";
        SeatingArrangementSystem seatingSystem = new SeatingArrangementSystem(databaseFile);

        while (true) {
            System.out.println("1. Add Student");
            System.out.println("2. Assign Seat");
            System.out.println("3. Remove Student");
            System.out.println("4. Display Student Details");
            System.out.println("5. Display All Students");
            System.out.println("6. Save Student Data");
            System.out.println("7. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    System.out.print("Enter Roll Number: ");
                    String rollNumber = scanner.nextLine();
                    System.out.print("Enter Name: ");
                    String name = scanner.nextLine();
                    Student student = new Student(rollNumber, name);
                    seatingSystem.addStudent(student);
                    System.out.println("Student added successfully.");
                    break;
                case 2:
                    System.out.print("Enter Roll Number: ");
                    rollNumber = scanner.nextLine();
                    System.out.print("Enter Floor Number: ");
                    int floorNumber = scanner.nextInt();
                    System.out.print("Enter Room Number: ");
                    int roomNumber = scanner.nextInt();
                    System.out.print("Enter Seat Number: ");
                    int seatNumber = scanner.nextInt();
                    seatingSystem.assignSeat(rollNumber, floorNumber, roomNumber, seatNumber);
                    break;
                case 3:
                    System.out.print("Enter Roll Number: ");
                    rollNumber = scanner.nextLine();
                    seatingSystem.removeStudent(rollNumber);
                    break;
                case 4:
                    System.out.print("Enter Roll Number: ");
                    rollNumber = scanner.nextLine();
                    seatingSystem.displayStudentDetails(rollNumber);
                    break;
                case 5:
                    seatingSystem.displayAllStudents();
                    break;
                case 6:
                    seatingSystem.saveStudents();
                    break;
                case 7:
                    seatingSystem.saveStudents();
                    System.out.println("Exiting...");
                    System.exit(0);
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }
}

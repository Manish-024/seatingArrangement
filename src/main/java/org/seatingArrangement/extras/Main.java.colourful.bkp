package org.seatingArrangement;

import java.io.*;
import java.util.*;

class Student {
    private String rollNumber;
    private String name;
    private int floorNumber;
    private int roomNumber;
    private int seatNumber;
    private String batch;
    private String course;
    private int semester;
    private String subject;

    public Student(String rollNumber, String name) {
        this.rollNumber = rollNumber;
        this.name = name;
    }

    public String getRollNumber() {
        return rollNumber;
    }

    public String getName() {
        return name;
    }

    public int getFloorNumber() {
        return floorNumber;
    }

    public int getRoomNumber() {
        return roomNumber;
    }

    public int getSeatNumber() {
        return seatNumber;
    }

    public String getBatch() {
        return batch;
    }

    public void setBatch(String batch) {
        this.batch = batch;
    }

    public String getCourse() {
        return course;
    }

    public void setCourse(String course) {
        this.course = course;
    }

    public int getSemester() {
        return semester;
    }

    public void setSemester(int semester) {
        this.semester = semester;
    }

    public String getSubject() {
        return subject;
    }

    public void setSubject(String subject) {
        this.subject = subject;
    }

    public void assignSeat(int floorNumber, int roomNumber, int seatNumber) {
        this.floorNumber = floorNumber;
        this.roomNumber = roomNumber;
        this.seatNumber = seatNumber;
    }
}

class SeatingArrangementSystem {
    private List<Student> students;
    private static final int MAX_SEATS_PER_ROOM = 20;
    private String databaseFile;

    public SeatingArrangementSystem(String databaseFile) {
        this.databaseFile = databaseFile;
        students = new ArrayList<>();
        loadStudents();
    }

    public void addStudent(Student student) {
        String rollNumber = student.getRollNumber();

        for (Student existingStudent : students) {
            if (existingStudent.getRollNumber().equals(rollNumber)) {
                System.out.println("\u001B[31mA student with the same roll number already exists.\u001B[0m");
                return;
            }
        }

        students.add(student);
    }

    public void displayAllStudents() {
        // Sort students based on roll numbers
        students.sort(Comparator.comparing(Student::getRollNumber));

        System.out.println("\u001B[33mAll Students:\u001B[0m");
        for (Student student : students) {
            String seatInfo = student.getRoomNumber() != 0 ? "Floor: " + student.getFloorNumber() + ", Room: " + student.getRoomNumber() + ", Seat: " + student.getSeatNumber() : "Seat not assigned";
            System.out.println("\u001B[36mRoll Number: " + student.getRollNumber() + "\u001B[0m");
            System.out.println("\u001B[36mName: " + student.getName() + "\u001B[0m");
            System.out.println("\u001B[36mBatch: " + student.getBatch() + "\u001B[0m");
            System.out.println("\u001B[36mCourse: " + student.getCourse() + "\u001B[0m");
            System.out.println("\u001B[36mSemester: " + student.getSemester() + "\u001B[0m");
            System.out.println("\u001B[36mSubject: " + student.getSubject() + "\u001B[0m");
            System.out.println("\u001B[36m" + seatInfo + "\u001B[0m");
            System.out.println("\u001B[35m-------------------------\u001B[0m");
        }
    }

    public void assignSeat(String rollNumber, int floorNumber, int roomNumber, int seatNumber) {
        if (!isRoomValid(roomNumber)) {
            System.out.println("\u001B[31mInvalid room number.\u001B[0m");
            return;
        }

        if (seatNumber <= 0 || seatNumber > MAX_SEATS_PER_ROOM) {
            System.out.println("\u001B[31mInvalid seat number. Seat number should be between 1 and " + MAX_SEATS_PER_ROOM + ".\u001B[0m");
            return;
        }

        for (Student student : students) {
            if (student.getRollNumber().equals(rollNumber)) {
                if (isSeatAvailable(floorNumber, roomNumber, seatNumber)) {
                    // Check if the seat is already assigned to another student
                    for (Student existingStudent : students) {
                        if (existingStudent != student && existingStudent.getFloorNumber() == floorNumber &&
                                existingStudent.getRoomNumber() == roomNumber && existingStudent.getSeatNumber() == seatNumber) {
                            System.out.println("\u001B[31mSeat is already assigned to another student.\u001B[0m");
                            return;
                        }
                    }

                    student.assignSeat(floorNumber, roomNumber, seatNumber);
                    System.out.println("\u001B[32mSeat assigned successfully.\u001B[0m");
                } else {
                    System.out.println("\u001B[31mSeat is already occupied or not available in the specified room.\u001B[0m");
                }
                return;
            }
        }
        System.out.println("\u001B[31mStudent not found.\u001B[0m");
    }

    private boolean isRoomValid(int roomNumber) {
        return roomNumber >= 1 && roomNumber <= 10;
    }

    private boolean isSeatAvailable(int floorNumber, int roomNumber, int seatNumber) {
        for (Student student : students) {
            if (student.getFloorNumber() == floorNumber && student.getRoomNumber() == roomNumber && student.getSeatNumber() == seatNumber) {
                return false; // Seat is already occupied
            }
        }
        return true; // Seat is available
    }

    public void removeStudent(String rollNumber) {
        for (Student student : students) {
            if (student.getRollNumber().equals(rollNumber)) {
                students.remove(student);
                System.out.println("\u001B[32mStudent removed successfully.\u001B[0m");
                return;
            }
        }
        System.out.println("\u001B[31mStudent not found.\u001B[0m");
    }

    public void displayStudentDetails(String rollNumber) {
        for (Student student : students) {
            if (student.getRollNumber().equals(rollNumber)) {
                String seatInfo = student.getRoomNumber() != 0 ? "Floor: " + student.getFloorNumber() + ", Room: " + student.getRoomNumber() + ", Seat: " + student.getSeatNumber() : "Seat not assigned";
                System.out.println("\u001B[33mStudent Details:\u001B[0m");
                System.out.println("\u001B[36mRoll Number: " + student.getRollNumber() + "\u001B[0m");
                System.out.println("\u001B[36mName: " + student.getName() + "\u001B[0m");
                System.out.println("\u001B[36m" + seatInfo + "\u001B[0m");
                System.out.println("\u001B[35m-------------------------\u001B[0m");
                return;
            }
        }
        System.out.println("\u001B[31mStudent not found.\u001B[0m");
    }

    public void saveStudents() {
        try (FileWriter writer = new FileWriter(databaseFile)) {
            for (Student student : students) {
                writer.write(student.getRollNumber() + "," + student.getName() + "," + student.getFloorNumber() + "," + student.getRoomNumber() + "," + student.getSeatNumber() + "\n");
            }
            System.out.println("\u001B[32mStudent data saved successfully.\u001B[0m");
        } catch (IOException e) {
            System.out.println("\u001B[31mError occurred while saving student data.\u001B[0m");
        }
    }

    public void loadStudents() {
        File file = new File(databaseFile);
        if (!file.exists()) {
            try {
                file.createNewFile();
            } catch (IOException e) {
                System.out.println("\u001B[31mError occurred while creating the database file.\u001B[0m");
                return;
            }
        } else {
            try (Scanner scanner = new Scanner(file)) {
                while (scanner.hasNextLine()) {
                    String line = scanner.nextLine();
                    String[] parts = line.split(",");
                    if (parts.length == 5) {
                        String rollNumber = parts[0].trim();
                        String name = parts[1].trim();
                        int floorNumber = Integer.parseInt(parts[2].trim());
                        int roomNumber = Integer.parseInt(parts[3].trim());
                        int seatNumber = Integer.parseInt(parts[4].trim());

                        Student student = new Student(rollNumber, name);
                        student.assignSeat(floorNumber, roomNumber, seatNumber);
                        students.add(student);
                    }
                }
                System.out.println("\u001B[32mStudent data loaded successfully.\u001B[0m");
            } catch (IOException e) {
                System.out.println("\u001B[31mError occurred while loading student data.\u001B[0m");
            }
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String databaseFile = "students.csv";
        SeatingArrangementSystem seatingSystem = new SeatingArrangementSystem(databaseFile);

        while (true) {
            System.out.println("\u001B[33m1. Add Student\u001B[0m");
            System.out.println("\u001B[33m2. Assign Seat\u001B[0m");
            System.out.println("\u001B[33m3. Remove Student\u001B[0m");
            System.out.println("\u001B[33m4. Display Student Details\u001B[0m");
            System.out.println("\u001B[33m5. Display All Students\u001B[0m");
            System.out.println("\u001B[33m6. Save Student Data\u001B[0m");
            System.out.println("\u001B[33m7. Exit\u001B[0m");
            System.out.print("\u001B[36mEnter your choice: \u001B[0m");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    System.out.print("\u001B[36mEnter roll number: \u001B[0m");
                    String rollNumber = scanner.nextLine();
                    System.out.print("\u001B[36mEnter name: \u001B[0m");
                    String name = scanner.nextLine();
                    Student student = new Student(rollNumber, name);
                    seatingSystem.addStudent(student);
                    break;
                case 2:
                    System.out.print("\u001B[36mEnter roll number: \u001B[0m");
                    rollNumber = scanner.nextLine();
                    System.out.print("\u001B[36mEnter floor number: \u001B[0m");
                    int floorNumber = scanner.nextInt();
                    System.out.print("\u001B[36mEnter room number: \u001B[0m");
                    int roomNumber = scanner.nextInt();
                    System.out.print("\u001B[36mEnter seat number: \u001B[0m");
                    int seatNumber = scanner.nextInt();
                    scanner.nextLine(); // Consume newline
                    seatingSystem.assignSeat(rollNumber, floorNumber, roomNumber, seatNumber);
                    break;
                case 3:
                    System.out.print("\u001B[36mEnter roll number: \u001B[0m");
                    rollNumber = scanner.nextLine();
                    seatingSystem.removeStudent(rollNumber);
                    break;
                case 4:
                    System.out.print("\u001B[36mEnter roll number: \u001B[0m");
                    rollNumber = scanner.nextLine();
                    seatingSystem.displayStudentDetails(rollNumber);
                    break;
                case 5:
                    seatingSystem.displayAllStudents();
                    break;
                case 6:
                    seatingSystem.saveStudents();
                    break;
                case 7:
                    seatingSystem.saveStudents();
                    System.out.println("\u001B[31mExiting...\u001B[0m");
                    System.exit(0);
                    break;
                default:
                    System.out.println("\u001B[31mInvalid choice. Please try again.\u001B[0m");
                    break;
            }
        }
    }
}

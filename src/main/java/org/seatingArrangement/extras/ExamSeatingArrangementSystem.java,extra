package org.seatingArrangement.extras;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class ExamSeatingArrangementSystem {
    private static final String DATABASE_FILE = "students.csv";

    public static void main(String[] args) {
        SeatingArrangementSystem seatingSystem = new SeatingArrangementSystem(DATABASE_FILE);
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("Exam Seating Arrangement System");
            System.out.println("1. Add Student");
            System.out.println("2. Display All Students");
            System.out.println("3. Assign Seat");
            System.out.println("4. Remove Student");
            System.out.println("5. Quit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume the newline character

            switch (choice) {
                case 1:
                    System.out.print("Enter Roll Number: ");
                    String rollNumber = scanner.nextLine();
                    System.out.print("Enter Name: ");
                    String name = scanner.nextLine();
                    System.out.print("Enter Subject: ");
                    String subject = scanner.nextLine();
                    System.out.print("Enter Course: ");
                    String course = scanner.nextLine();
                    System.out.print("Enter Batch: ");
                    String batch = scanner.nextLine();
                    seatingSystem.addStudent(new Student(rollNumber, name, subject, course, batch));
                    seatingSystem.saveStudents();
                    break;
                case 2:
                    seatingSystem.displayAllStudents();
                    break;
                case 3:
                    System.out.print("Enter Roll Number: ");
                    String rollNumberAssign = scanner.nextLine();
                    System.out.print("Enter Seat Number: ");
                    int seatNumber = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline character
                    seatingSystem.assignSeat(rollNumberAssign, seatNumber);
                    seatingSystem.saveStudents();
                    break;
                case 4:
                    System.out.print("Enter Roll Number: ");
                    String rollNumberRemove = scanner.nextLine();
                    seatingSystem.removeStudent(rollNumberRemove);
                    seatingSystem.saveStudents();
                    break;
                case 5:
                    System.out.println("Exiting...");
                    return;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
            System.out.println();
        }
    }

    private static class Student {
        private String rollNumber;
        private String name;
        private String subject;
        private String course;
        private String batch;
        private int seatNumber;

        public Student(String rollNumber, String name, String subject, String course, String batch) {
            this.rollNumber = rollNumber;
            this.name = name;
            this.subject = subject;
            this.course = course;
            this.batch = batch;
        }

        public String getRollNumber() {
            return rollNumber;
        }

        public String getName() {
            return name;
        }

        public String getSubject() {
            return subject;
        }

        public String getCourse() {
            return course;
        }

        public String getBatch() {
            return batch;
        }

        public int getSeatNumber() {
            return seatNumber;
        }

        public void assignSeat(int seatNumber) {
            this.seatNumber = seatNumber;
        }
    }

    private static class SeatingArrangementSystem {
        private List<Student> students;
        private String databaseFile;

        public SeatingArrangementSystem(String databaseFile) {
            this.databaseFile = databaseFile;
            students = new ArrayList<>();
            loadStudents();
        }

        public void addStudent(Student student) {
            students.add(student);
        }

        public void displayAllStudents() {
            System.out.println("All Students:");
            for (Student student : students) {
                System.out.println("Roll Number: " + student.getRollNumber());
                System.out.println("Name: " + student.getName());
                System.out.println("Subject: " + student.getSubject());
                System.out.println("Course: " + student.getCourse());
                System.out.println("Batch: " + student.getBatch());
                if (student.getSeatNumber() != 0) {
                    System.out.println("Seat Number: " + student.getSeatNumber());
                } else {
                    System.out.println("Seat not assigned");
                }
                System.out.println("-------------------------");
            }
        }

        public void assignSeat(String rollNumber, int seatNumber) {
            for (Student student : students) {
                if (student.getRollNumber().equals(rollNumber)) {
                    student.assignSeat(seatNumber);
                    System.out.println("Seat assigned successfully.");
                    return;
                }
            }
            System.out.println("Student not found.");
        }

        public void removeStudent(String rollNumber) {
            Student foundStudent = null;
            for (Student student : students) {
                if (student.getRollNumber().equals(rollNumber)) {
                    foundStudent = student;
                    break;
                }
            }
            if (foundStudent != null) {
                students.remove(foundStudent);
                System.out.println("Student removed successfully.");
            } else {
                System.out.println("Student not found.");
            }
        }

        public void saveStudents() {
            try (FileWriter writer = new FileWriter(databaseFile)) {
                for (Student student : students) {
                    writer.write(student.getRollNumber() + "," + student.getName() + "," + student.getSubject() + "," + student.getCourse() + "," + student.getBatch() + "," + student.getSeatNumber() + "\n");
                }
                System.out.println("Student data saved successfully.");
            } catch (IOException e) {
                System.out.println("Error occurred while saving student data.");
            }
        }

        private void loadStudents() {
            try (BufferedReader reader = new BufferedReader(new FileReader(databaseFile))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] data = line.split(",");
                    if (data.length == 6) {
                        String rollNumber = data[0];
                        String name = data[1];
                        String subject = data[2];
                        String course = data[3];
                        String batch = data[4];
                        int seatNumber = Integer.parseInt(data[5]);
                        students.add(new Student(rollNumber, name, subject, course, batch));
                        students.get(students.size() - 1).assignSeat(seatNumber);
                    }
                }
                System.out.println("Student data loaded successfully.");
            } catch (IOException e) {
                System.out.println("Error occurred while loading student data.");
            }
        }
    }
}
